# -*- coding: utf-8 -*-
"""epilepsy_project_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dYusVgQQ5orTFAyCx8tvsp2HU3v1SXwr
"""

#Project Name: Epilepsy
#Group: Bryce Whitcomb
#Email: bawhitco@asu.edu
#    The purpose of my project is to determine correlations between cognitive performace and
#    epilepsy. I am looking at data pertaining information related to the performaces of
#    epileptic patients who are not on medication, epileptic students who are on medication,
#    and a control group. Additionally I would like to look into any behavioral differences
#    between these patients and any long-term education levels of epileptic patients. The data
#    involving epileptic students will be separated into medicated or unmedicated and genetic,
#    unknown etiology, and structural epilepsy.
#Sources:
#    https://onlinelibrary.wiley.com/share/JPRPMU8RRM87DKZUU4C3?target=10.1111/j.0013-9580.2004.33403.x
#    https://doi.org/10.6084/m9.figshare.14290183.v1

# this allows you to connect your Google drive to this notebook
from google.colab import drive
drive.mount('/content/drive')
final_base = '/content/drive/MyDrive/MAT 494 Final Project'  # base directory for the Google classroom content

# Commented out IPython magic to ensure Python compatibility.
#importing packages
# %matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import scipy
import scipy.constants as constants
import pandas as pd
import warnings
warnings.filterwarnings("ignore")

from google.colab import auth
import gspread
from google.auth import default
#autenticating to google
auth.authenticate_user()
creds, _ = default()
gc = gspread.authorize(creds)

#defining my worksheet
worksheet1 = gc.open('clinical_aspects').sheet1
#get_all_values gives a list of rows
rows1 = worksheet1.get_all_values()
#Convert to a DataFrame
df1 = pd.DataFrame(rows1)

#repeat for all other worksheets
worksheet2 = gc.open('MMSE').sheet1
rows2 = worksheet2.get_all_values()
df2 = pd.DataFrame(rows2)

worksheet3 = gc.open('occurrence').sheet1
rows3 = worksheet3.get_all_values()
df3 = pd.DataFrame(rows3)

worksheet4 = gc.open('onset').sheet1
rows4 = worksheet4.get_all_values()
df4 = pd.DataFrame(rows4)

worksheet5 = gc.open('odds').sheet1
rows5 = worksheet5.get_all_values()
df5 = pd.DataFrame(rows5)

#printing table 1
df1

#printing table 2
df2

#printing table 3
df3

#creating a new dataframe using specific rows and columns from df3
df3_imp = df3.iloc[5:18, 1:4]
#renaming the columns to their desired names
df3_imp = df3_imp.rename(columns={1: '', 2: 'No Impairment(%)',3: 'Impairment(%)'})
#looping through each row of the dataframe to find the proportion of impairment and
#no impairment to the total subjects in the study
for index, row in df3_imp.iterrows():
  #converting from the string values that were obtained from the worksheet into floats which can be operated on
    result = float(row['No Impairment(%)']) + float(row['Impairment(%)'])
    #converting to rounds with a decimal of 1 in order to visualize the results as a percentage
    df3_imp.at[index, 'No Impairment(%)'] = round(float(row['No Impairment(%)']) / result * 100, 1)
    df3_imp.at[index, 'Impairment(%)'] = round(float(row['Impairment(%)']) / result * 100, 1)

df3_imp

#printing tanble 4
df4

#separating table 4 into just general tests, not the clock drawing test
df4_new = df4.iloc[0:10]
#printing the separated table 4
df4_new

#printing table 5
df5